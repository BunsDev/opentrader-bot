// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

generator zod {
  provider          = "zod-prisma-types"
  output            = "./zod"
  useMultipleFiles  = true
  // Since there is a known typscript error when using zod greater than 3.21.1 you can
  // now use type assertions to circumvent the error and use the latest version of zod.
  // @todo remove when issue will be resolved
  // @see https://github.com/chrishoermann/zod-prisma-types#usetypeassertions
  useTypeAssertions = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

enum ExchangeCode {
  OKX
  BYBIT
  BINANCE
  KRAKEN
  COINBASE
  GATEIO
}

enum BotType {
  Bot
  GridBot
}

enum OrderSide {
  Buy
  Sell
}

enum OrderStatus {
  Idle
  Placed
  Filled
  Canceled
  Revoked
  Deleted
}

enum OrderType {
  Limit
  Market
}

enum UserRole {
  User
  Admin
}

enum SmartTradeType {
  Trade
  DCA
}

// SmartTrade enums
enum EntryType {
  Order
  Ladder
}

enum TakeProfitType {
  Order
  Ladder
  None
}

enum EntityType {
  EntryOrder
  TakeProfitOrder
  StopLossOrder
  SafetyOrder
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  displayName String?
  role        UserRole @default(User)
  password    String

  exchangeAccounts ExchangeAccount[]
  smartTrades      SmartTrade[]
  bots             Bot[]
}

model ExchangeAccount {
  id           Int          @id @default(autoincrement())
  name         String
  label        String?      @unique
  exchangeCode ExchangeCode // ExchangeCode

  // Credentials
  apiKey        String
  secretKey     String
  password      String?
  isDemoAccount Boolean @default(false)

  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  smartTrades SmartTrade[]
  bots        Bot[]

  expired Boolean @default(false)
}

model SmartTrade {
  id Int @id @default(autoincrement())

  type           SmartTradeType
  entryType      EntryType
  takeProfitType TakeProfitType

  baseCurrency     String
  quoteCurrency    String
  exchangeSymbolId String // BTC/USDT, for future usage with Margin/Futures the symbolId may differ from patter `baseCurrency/quoteCurrency`
  orders           Order[]

  ref String? // user provided reference value

  exchangeAccount   ExchangeAccount @relation(fields: [exchangeAccountId], references: [id])
  exchangeAccountId Int

  bot   Bot? @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId Int?

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  status      OrderStatus @default(Idle)
  type        OrderType
  entityType  EntityType
  side        OrderSide
  price       Float? // Market orders doesn't require price to be specified
  filledPrice Float?
  fee         Float?

  exchangeOrderId String?

  quantity     Float
  smartTrade   SmartTrade @relation(fields: [smartTradeId], references: [id], onDelete: Cascade)
  smartTradeId Int

  createdAt DateTime  @default(now())
  placedAt  DateTime?
  syncedAt  DateTime? @default(now()) // Last time the exchange Order status was synced with the DB
  filledAt  DateTime?

  updatedAt DateTime @updatedAt
}

model Bot {
  id            Int     @id @default(autoincrement())
  type          BotType
  name          String
  label         String? @unique
  baseCurrency  String
  quoteCurrency String
  enabled       Boolean @default(false)

  // Template name that will be executed by the bot
  // e.g. `gridBot`, see templates in @opentrader/templates
  template String

  // Bot template will be executed at the candle close of specified timeframe.
  // If not specified than the template will be executed on SmartTrade filled event.
  timeframe String?

  // Means that the bot template is being processed right now.
  // This must guarantee that the bot template will not be processed
  // several times simultaneously.
  // After process finish, the value must be set back to `false`.
  processing Boolean @default(false)

  createdAt DateTime @default(now())

  settings Json // @todo gridLines
  state    Json @default("{}")

  smartTrades SmartTrade[]

  exchangeAccount   ExchangeAccount @relation(fields: [exchangeAccountId], references: [id])
  exchangeAccountId Int

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int

  // @todo initialInvestment
}

model Markets {
  exchangeCode ExchangeCode @id
  markets      Json
  updatedAt    DateTime     @updatedAt
}

// model BotState {
//   id Int @id @default(autoincrement())
//   type String // smartTradeRef
//   key String // index provided by user
//   value String // smartTrade.id
//   bot Bot @relation(fields: [botId], references: [id])
//   botId Int
// }
